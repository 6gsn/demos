{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-homepage-query-tsx-7d80428d42bf923b7859.js","mappings":"sNAkCA,EAXiB,SAAC,GAA2B,IAAzBA,EAAwB,EAAxBA,MAClB,GAA+BC,EAAAA,EAAAA,KAA/B,EAAQC,SAAR,EAAkBC,UACIC,EAAAA,EAAAA,KAAdC,UAER,OACE,QAAC,IAAD,MACE,QAAC,IAAD,CAASL,MAAOA,EAAOM,UAAU,MC1BvC,MCQe,YAAuD,IAAjBC,EAAgB,oBAEzDC,EACND,EADFE,KAAQD,QAGV,OAAO,gBAAC,EAAD,eAAUR,MAAOQ,EAAQE,OAAWH,M,4HCc7C,EAjBiB,SAAC,GAAyB,IAAvBI,EAAsB,EAAtBA,KAClB,GAA+BV,EAAAA,EAAAA,KAAvBW,EAAR,EAAQA,SAAUV,EAAlB,EAAkBA,SAElB,OACE,gBAAC,WAAD,KACGS,EAAKE,KAAI,SAACC,EAAKC,GAAN,OACR,gBAAC,WAAD,CAAgBC,IAAKF,EAAIG,QACpBF,GAAF,KACD,gBAAC,KAAD,CAAOG,GAAIC,EAAAA,KAAMC,IAAIC,EAAAA,EAAAA,GAAe,IAAInB,EAAL,IAAiBU,EAAjB,IAA6BE,EAAIG,OACjEH,EAAIQ,YCiBjB,EAjBqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,IAASjB,SAAAA,OAAT,gBACnB,QAAC,KAAD,CAAKkB,GAAI,IACP,QAAC,KAAD,CAAON,GAAIC,EAAAA,KAAMC,GAAIG,EAAKN,KAAMQ,GAAI,CAAEC,SAAU,CAAC,EAAG,EAAG,GAAIC,MAAM,SAC9DJ,EAAKK,QAER,aAAGH,GAAI,CAAEE,MAAM,YAAcE,GAAI,EAAGC,EAAG,CAAEH,MAAM,aAAgBD,SAAU,CAAC,EAAG,EAAG,MAC9E,oBAAOH,EAAKQ,MACXR,EAAKZ,MAAQL,IACZ,QAAC,WAAD,YAEE,QAAC,EAAD,CAAUK,KAAMY,EAAKZ,WCH/B,EARgB,SAAC,GAAD,IAAGX,EAAH,EAAGA,MAAH,IAAUgC,UAAAA,OAAV,eAA0B1B,SAAAA,OAA1B,gBACd,mBAASmB,GAAI,CAAED,GAAI,CAAC,EAAG,EAAG,IAAMQ,UAAWA,GACxChC,EAAMa,KAAI,SAACU,GAAD,OACT,QAAC,EAAD,CAAcP,IAAKO,EAAKN,KAAMM,KAAMA,EAAMjB,SAAUA","sources":["webpack://demos/./src/@lekoarts/gatsby-theme-minimal-blog/components/homepage.tsx","webpack://demos/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/homepage-query.tsx","webpack://demos/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/homepage.tsx","webpack://demos/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack://demos/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/blog-list-item.tsx","webpack://demos/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/listing.tsx"],"sourcesContent":["/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport Layout from \"@lekoarts/gatsby-theme-minimal-blog/src/components/layout\"\nimport Listing from \"@lekoarts/gatsby-theme-minimal-blog/src/components/listing\"\nimport useMinimalBlogConfig from \"@lekoarts/gatsby-theme-minimal-blog/src/hooks/use-minimal-blog-config\"\nimport useSiteMetadata from \"@lekoarts/gatsby-theme-minimal-blog/src/hooks/use-site-metadata\"\n\ntype PostsProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  [key: string]: any\n}\n\nconst Homepage = ({ posts }: PostsProps) => {\n  const { basePath, blogPath } = useMinimalBlogConfig()\n  const { siteTitle } = useSiteMetadata()\n\n  return (\n    <Layout>\n      <Listing posts={posts} showTags={false} />\n    </Layout>\n  )\n}\n\nexport default Homepage\n","import { graphql } from \"gatsby\"\nimport HomepageComponent from \"../components/homepage\"\n\nexport default HomepageComponent\n\nexport const query = graphql`\n  query ($formatString: String!) {\n    allPost(sort: { fields: date, order: DESC }, limit: 3) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n","import * as React from \"react\"\nimport Homepage from \"../../../components/homepage\"\n\ntype Props = {\n  data: {\n    allPost: any\n    [key: string]: string\n  }\n  [key: string]: any\n}\n\nexport default function MinimalBlogCoreHomepage({ ...props }: Props) {\n  const {\n    data: { allPost },\n  } = props\n\n  return <Homepage posts={allPost.nodes} {...props} />\n}\n","import * as React from \"react\"\nimport { Link as TLink } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <TLink as={Link} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </TLink>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","/** @jsx jsx */\nimport * as React from \"react\"\nimport { jsx, Link as TLink, Box } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport ItemTags from \"./item-tags\"\n\ntype BlogListItemProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }\n  showTags?: boolean\n}\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <Box mb={4}>\n    <TLink as={Link} to={post.slug} sx={{ fontSize: [1, 2, 3], color: `text` }}>\n      {post.title}\n    </TLink>\n    <p sx={{ color: `secondary`, mt: 1, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && showTags && (\n        <React.Fragment>\n          {` â€” `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n  </Box>\n)\n\nexport default BlogListItem\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport BlogListItem from \"./blog-list-item\"\n\ntype ListingProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  className?: string\n  showTags?: boolean\n}\n\nconst Listing = ({ posts, className = ``, showTags = true }: ListingProps) => (\n  <section sx={{ mb: [5, 6, 7] }} className={className}>\n    {posts.map((post) => (\n      <BlogListItem key={post.slug} post={post} showTags={showTags} />\n    ))}\n  </section>\n)\n\nexport default Listing\n"],"names":["posts","useMinimalBlogConfig","basePath","blogPath","useSiteMetadata","siteTitle","showTags","props","allPost","data","nodes","tags","tagsPath","map","tag","i","key","slug","as","Link","to","replaceSlashes","name","post","mb","sx","fontSize","color","title","mt","a","date","className"],"sourceRoot":""}